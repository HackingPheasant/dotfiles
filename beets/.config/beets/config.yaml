## Beets Configuration file.
## ~./config/beets/config.yaml

# Define directorty for music and beets db
library: ~/Audio/.musiclibrary.db
directory: ~/Audio/

# Load plugins to extended beets (both internal and 3rd party)
plugins:
    # Autotagger Extensions
    - fromfilename
    # Metadata Plugins
    - edit
    - fetchart
    - embedart
    - ftintitle
    - lastgenre
    - mbsync
    # Path Format Plugins
    - inline
    # Interoperability
    - badfiles
    - play
    # Miscellaneous Plugins
    - audit
    - convert
    - duplicates
    - export
    - fuzzy
    - info
    - missing
    - random
    - web
    # Other/External Plugins
    - extrafiles 

# Program configuration
threaded: yes

ui:
    color: yes

import:
    write: yes
    copy: yes
    move: no
    resume: ask
    incremental: yes
    quiet_fallback: skip
    log: ~/Audio/.beet.log
    bell: yes
    languages: en jp de 

per_disc_numbering: true

aunique:
    # Drop some disambiguation fallbacks
    disambuguators: media mastering label catalognum albumdisambig releasegroupdisambig

match:
    preferred:
        media: ['Vinyl', 'CD', 'Digital Media|File']

# Done in order listed. Default is special and will always go at the end.
# e.g. If I had an album with the albumtype $soundtrack and $compilation
# Then the path that matchs first takes precedence.
paths: 
    # Beets inbuilt paths
    default: Music/%upper{%left{{$albumartist_sort,1}}/$albumartist/%if{$hasyear, ($year)} $album%aunique{} $alb_type $alb_status $media_type/%if{$multidisc,Disc $disc/}%if{alt_tracks, $track_alt, $track}. $title
    comp: Music/Various Artists/$album%aunique{} %if{$hasyear, ($year)} $alb_type $alb_status $media_type/%if{$multidisc,Disc $disc/}%if{alt_tracks, $track_alt, $track}. $title
    singleton: Music/Individual Songs/$artist - $title
    # Beets extra/other album types
    albumtype:soundtrack: Music/Original Sound Tracks (OST)/$album%aunique{} %if{$hasyear, ($year)} $alb_type $alb_status $media_type/%if{$multidisc,Disc $disc/}%if{alt_tracks, $track_alt, $track}. $title
    albumtype:audiobook: Audiobooks/$albumartist/$album%aunique{} %if{$hasyear, ($year)} $media_type/%if{$multidisc,Disc $disc/}%if{alt_tracks, $track_alt, $track}. $title
    albumtype:other: Other/%upper{%left{{$albumartist_sort,1}}/$albumartist/%if{$hasyear, ($year)} $album%aunique{} $alb_type $alb_status $media_type/%if{$multidisc,Disc $disc/}%if{alt_tracks, $track_alt, $track}. $title

# Inline replacements used in path formatting
#
# Note: You may need to add a 'u' in-front of text to signify unicode in python 2
# Unicode is default in python 3 so its not needed
# TODO:
# - Note if Reissue/Remaster
# - Check Beets Padding issue for tracks and multidisc releases https://github.com/beetbox/beets/issues/3352
# - Borrow ideas from this config https://gist.github.com/RollingStar/86e041338df295afbbf77a9027903068
# - Split Anime/Game genre soundtracks out of the OST path using genre:game etc
# - Classic genre which is sorted by composer

album_fields:
    alb_status: |
        # MB returns 4 values describing how "offical" a release is, they are:
        # Official, Promotional, Bootleg, and Pseudo-Release
        # We only note the middle two.
        # https://musicbrainz.org/doc/Release#Status
        if 'Promo' in albumstatus:
            return '[Promo]'
        elif 'Bootleg' in albumstatus:
            return '[Bootleg]'
        else:
            return ''

    # Check if https://github.com/beetbox/beets/issues/2200 affects below
    alb_type: |
        alb_types = None
        albumtypes_list = {
            'ep': 'EP',
            'single': 'Single',
            'live': 'Live',
            'remix': 'Remix',
            'dj-mix': 'DJ-mix',
            'mixtape/street': 'Mixtapeâ§¸Street',
        }
        for key, value in albumtypes_list.items():
            if albumtype == key:
                alb_types += "[" + str(value) + "] "
        if alb_types is not None:
            return alb_types.strip()
        else:
            return ""

    media_type: |
        # https://musicbrainz.org/doc/Release/Format
        # Lets Merge the variations of the same medium into the main medium name (Opinonated)
        media_list = {
            '12" Vinyl': 'Vinyl',
            '10" Vinyl': 'Vinyl',
            '7" Vinyl': 'Vinyl',
            'Cassette': 'Cassette',
        }
        # Lets omit these instead of converging them under a similar label like above (Opinonated)
        media_types_to_omit = ['CD', 'CD-R', 'Enhanced CD', 'CDDA', 'Blu-spec CD', 'SHM-CD', 'HQCD', '']
        if media in media_list:
            return "[" + str(media) + "]"
        elif media in media_types_to_omit:
            return ""
        else:
            return "[" + str(media) + "]"

    hasyear: 1 if year > 0 else 0
    multidisc: 1 if disctotal > 1 else 0

item_fields:
    alt_tracks: 1 if media in ['12" Vinyl', '10" Vinyl', '7" Vinyl', 'Vinyl', 'Cassette'] else 0

# Plugin and Misc Configurations

# Beets will remove empty directory after import if these are the only things left in it
# Currently isn't used in here by default, this is because we copy instead of move files
clutter: ["Thumbs.DB", ".DS_Store", "*.m3u", "*.m3u8", "*.sfv"]
    
fetchart:
    store_source: yes

embedart:
    # No auto-embedded album art
    auto: no

convert:
    # auto: yes
    copy_album_art: yes
    album_art_maxwidth: 1080
    dest: ~/Audio/Music [Mobile version]/
    embed: yes
    never_convert_lossy_files: yes
    format: mp3
    formats:
        mp3:
            command: ~/.scripts/flac-to-mp3.sh $source $dest
            extension: mp3
        opus:
            command: ffmpeg -i $source -y -vn -acodec libopus -ab 128k $dest
            extension: opus
            # extension opus.ogg
            # Above is to work around android media scanner, opus is included 
            # in the file extension for making it easier on me in the future
            # when android media scanner picks up opus extensions properly

extrafiles:
    patterns:
        artworkdir: 
          - '[aA]rtwork/'
        scansdir:
          - '[sS]cans/'
        logncue:
          - '*.cue'
          - '*.log'
          - '*.accurip'
          - '*.txt'
    paths:
        artworkdir: $albumpath/Artwork
        scansdir: $albumpath/Scans
        logncue: $albumpath/$filename

lastgenre:
    count: 5

play:
    command: /usr/bin/mpv
